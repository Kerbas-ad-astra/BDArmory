//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace BahaTurret
{
	public class BDModulePilotAI : PartModule
	{
		public enum SteerModes{NormalFlight, PreciseFlight, Aiming}
		SteerModes steerMode = SteerModes.NormalFlight;

		public enum PilotBehaviors{Orbit, Attack, Follow, Evade}


		[KSPField(isPersistant = true)]
		public bool pilotEnabled = false;

		bool startedLanded = false;
		bool extending = false;

		GameObject vobj;
		Transform velocityTransform
		{
			get
			{
				if(!vobj)
				{
					vobj = new GameObject("velObject");
					vobj.transform.position = vessel.ReferenceTransform.position;
					vobj.transform.parent = vessel.ReferenceTransform;
				}

				return vobj.transform;
			}
		}

		Vessel targetVessel;

		Transform vesselTransform;

		Vector3 upDirection = Vector3.up;

		MissileFire wm;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Default Alt."),
		 UI_FloatRange(minValue = 500f, maxValue = 8500f, stepIncrement = 25f, scene = UI_Scene.All)]
		public float defaultAltitude = 1500;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Min Altitude"),
		 UI_FloatRange(minValue = 150f, maxValue = 8500, stepIncrement = 10f, scene = UI_Scene.All)]
		public float minAltitude = 900;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Factor"),
		 UI_FloatRange(minValue = 0.1f, maxValue = 20f, stepIncrement = .1f, scene = UI_Scene.All)]
		public float steerMult = 14;
		//make a combat steer mult and idle steer mult
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Limiter"),
		 UI_FloatRange(minValue = .1f, maxValue = 1f, stepIncrement = .05f, scene = UI_Scene.All)]
		public float maxSteer = 1;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Damping"),
		 UI_FloatRange(minValue = 1f, maxValue = 8f, stepIncrement = 0.5f, scene = UI_Scene.All)]
		public float steerDamping = 5;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Max Speed"),
		 UI_FloatRange(minValue = 125f, maxValue = 800f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float maxSpeed = 325;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "TakeOff Speed"),
			UI_FloatRange(minValue = 20f, maxValue = 200f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float takeOffSpeed = 70;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Standby Mode"),
		 UI_Toggle(enabledText = "On", disabledText = "Off")]
		public bool standbyMode = false;

		float threatLevel = 1;
		float turningTimer = 0;
		float evasiveTimer = 0;
		Vector3 lastTargetPosition;

		string debugString = string.Empty;

		LineRenderer lr;
		Vector3 flyingToPosition;

		//collision detection
		int collisionDetectionTicker = 0;
		float collisionDetectionTimer = 0;
		Vector3 collisionAvoidDirection;

		void Start()
		{
			if(HighLogic.LoadedSceneIsFlight)
			{
				part.OnJustAboutToBeDestroyed += DeactivatePilot;
				vessel.OnJustAboutToBeDestroyed += DeactivatePilot;

				if(pilotEnabled)
				{
					ActivatePilot();
				}
			}

			RefreshPartWindow();
		}

		[KSPAction("Activate Pilot")]
		public void AGActivatePilot(KSPActionParam param)
		{
			ActivatePilot();
		}

		[KSPAction("Deactivate Pilot")]
		public void AGDeactivatePilot(KSPActionParam param)
		{
			DeactivatePilot();
		}

		[KSPAction("Toggle Pilot")]
		public void AGTogglePilot(KSPActionParam param)
		{
			TogglePilot();
		}


		public void ActivatePilot()
		{
			pilotEnabled = true;
			vessel.OnFlyByWire -= AutoPilot;
			vessel.OnFlyByWire += AutoPilot;
			startedLanded = vessel.Landed;

			GameEvents.onVesselDestroy.Remove(RemoveAutopilot);
			GameEvents.onVesselDestroy.Add(RemoveAutopilot);

			RefreshPartWindow();
		}

		public void DeactivatePilot()
		{
			pilotEnabled = false;
			vessel.OnFlyByWire -= AutoPilot;
			RefreshPartWindow();
		}

		void RemoveAutopilot(Vessel v)
		{
			if(v == vessel)
			{
				v.OnFlyByWire -= AutoPilot;
			}
		}



		[KSPEvent(guiActive = true, guiName = "Toggle Pilot", active = true)]
		public void TogglePilot()
		{
			if(pilotEnabled)
			{
				DeactivatePilot();
			}
			else
			{
				ActivatePilot();
			}
		}

		void RefreshPartWindow()
		{
			Events["TogglePilot"].guiName = pilotEnabled ? "Deactivate Pilot" : "Activate Pilot";

			//Misc.RefreshAssociatedWindows(part);
		}

		void Update()
		{
			if(BDArmorySettings.DRAW_DEBUG_LINES && pilotEnabled)
			{
				if(lr)
				{
					lr.enabled = true;
					lr.SetPosition(0, vessel.ReferenceTransform.position);
					lr.SetPosition(1, flyingToPosition);
				}
				else
				{
					lr = gameObject.AddComponent<LineRenderer>();
					lr.SetVertexCount(2);
					lr.SetWidth(0.5f, 0.5f);
				}
			}
			else
			{
				if(lr)
				{
					lr.enabled = false;
				}
			}
		}


		void AutoPilot(FlightCtrlState s)
		{
			if(!vessel || !vessel.transform || vessel.packed || !vessel.mainBody)
			{
				return;
			}
			vesselTransform = vessel.ReferenceTransform;

			//default brakes off full throttle
			s.mainThrottle = 1;
			vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, false);
			vessel.ActionGroups.SetGroup(KSPActionGroup.SAS, true);

			steerMode = SteerModes.NormalFlight;


			GetGuardTarget();
			if(vessel.Landed && standbyMode && wm && BDATargetManager.TargetDatabase[BDATargetManager.BoolToTeam(wm.team)].Count == 0)
			{
				s.mainThrottle = 0;
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				return;
			}
			//upDirection = -FlightGlobals.getGeeForceAtPosition(transform.position).normalized;
			upDirection = VectorUtils.GetUpDirection(vessel.transform.position);
			debugString = string.Empty;
			if(MissileGuidance.GetRadarAltitude(vessel) < minAltitude)
			{
				startedLanded = true;
			}



			if(startedLanded)
			{
				TakeOff(s);
				turningTimer = 0;
			}
			else
			{
				if(FlyAvoidCollision(s))
				{
					turningTimer = 0;
					return;
				}

				if(wm && wm.guardMode && !targetVessel)
				{
					TargetInfo potentialTarget = BDATargetManager.GetLeastEngagedTarget(wm);
					if(potentialTarget && potentialTarget.Vessel)
					{
						targetVessel = potentialTarget.Vessel;
					}
				}

				if(evasiveTimer > 0 || (wm && (wm.missileIsIncoming || wm.isChaffing || wm.isFlaring)))
				{
					Evasive(s);
					evasiveTimer += Time.fixedDeltaTime;
					turningTimer = 0;

					if(evasiveTimer > 5) evasiveTimer = 0;
				}
				else if(!extending && wm && targetVessel!=null && targetVessel.transform!=null)
				{
					if(!targetVessel.Landed)
					{
						if(vessel.altitude < defaultAltitude && Vector3.Angle(targetVessel.transform.position-vessel.transform.position, -upDirection) < 35)
						{
							//dangerous if low altitude and target is far below you - don't dive into ground!
							extending = true;
							lastTargetPosition = targetVessel.transform.position;
						}

						if(Vector3.Angle(targetVessel.transform.position-vesselTransform.position, vesselTransform.up) > 35)
						{
							turningTimer += Time.deltaTime;
						}
						else
						{
							turningTimer = 0;
						}

						debugString += "turningTimer: "+turningTimer;

						if(turningTimer > 15)
						{
							//extend if turning circles for too long
							extending = true;
							turningTimer = 0;
							lastTargetPosition = targetVessel.transform.position;
						}
					}
					else //extend if too close for agm attack
					{
						float extendDistance = Mathf.Clamp(wm.guardRange-1800, 2500, 4000);
						float srfDist = Vector3.Distance(GetSurfacePosition(targetVessel.transform.position), GetSurfacePosition(vessel.transform.position));

						if(srfDist < extendDistance && Vector3.Angle(vesselTransform.up, targetVessel.transform.position-vessel.transform.position) > 45)
						{
							extending = true;
							lastTargetPosition = targetVessel.transform.position;
						}
					}

					if(!extending)
					{
						debugString += "\nFlying to target";
						threatLevel = 1;
						FlyToTargetVessel(s, targetVessel);
					}
				}
				else
				{
					if(!extending)
					{
						FlyCircular(s);
					}
				}

				if(extending)
				{
					threatLevel = 1;
					debugString += "\nExtending";
					FlyExtend(s, lastTargetPosition);
				}
			}

			//brake and cut throttle if exceeding max speed
			if(vessel.srfSpeed > maxSpeed)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				s.mainThrottle = 0;
			}

			debugString += "\nthreatLevel: "+threatLevel;
		}


		bool FlyAvoidCollision(FlightCtrlState s)
		{
			if(collisionDetectionTimer > 5)
			{
				collisionDetectionTimer = 0;
			}
			if(collisionDetectionTimer > 0)
			{
				//fly avoid
				debugString += "\nAvoiding Collision";
				collisionDetectionTimer += Time.fixedDeltaTime;


				Vector3 target = vesselTransform.position + collisionAvoidDirection;
				FlyToPosition(s, target);
				return true;
			}
			else if(collisionDetectionTicker > 30)
			{
				collisionDetectionTicker = 0;
				if(DetectCollision(flyingToPosition - vesselTransform.position))
				{
					collisionDetectionTimer += Time.fixedDeltaTime;
					Vector3 badDirection = flyingToPosition - vesselTransform.position;
					Vector3 axis = -Vector3.Cross(vesselTransform.up, badDirection);
					axis = Vector3.Project(axis, upDirection);
					collisionAvoidDirection = Quaternion.AngleAxis(90, axis) * badDirection; //need to change axis to opposite of direction to collision
				}
			}
			else
			{
				collisionDetectionTicker++;
			}

			return false;
		}

		void FlyToTargetVessel(FlightCtrlState s, Vessel v)
		{
			Vector3 target = v.CoM;
			MissileLauncher missile = null;
			Vector3 vectorToTarget = v.transform.position - vesselTransform.position;
			float distanceToTarget = vectorToTarget.magnitude;
			if(wm)
			{
				missile = wm.currentMissile;
				if(missile != null)
				{
					target = MissileGuidance.GetAirToAirFireSolution(missile, v);
            	}
				else
				{
					ModuleWeapon weapon = wm.currentGun;
					if(weapon!=null)
					{
						//target -= 1.30f*weapon.GetLeadOffset();
						Vector3 leadOffset = weapon.GetLeadOffset();

						float targetAngVel = 1.65f * Vector3.Angle(v.transform.position - vessel.transform.position, v.transform.position + (vessel.srf_velocity) - vessel.transform.position);
						debugString += "\ntargetAngVel: " + targetAngVel;
						float magnifier = Mathf.Clamp(targetAngVel, 1.25f, 5);
						target -= magnifier * leadOffset;
						float angleToLead = Vector3.Angle(vesselTransform.up, target - vesselTransform.position);
						if(distanceToTarget < 1600 &&  angleToLead < 20)
						{
							steerMode = SteerModes.Aiming; //steer to aim
						}
					}
				}


			}

			FlyToPosition(s, target);

			
			//try airbrake if in front of enemy
			if(Vector3.Dot(vesselTransform.up, v.transform.position-vessel.transform.position) < 0  
				&& distanceToTarget < 800 //distance is less than 800m
			   && vessel.srfSpeed > 200) //airspeed is more than 200 
			{
				debugString += ("\nEnemy on tail. Braking");
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
			}
			if(missile!=null 
			   && Vector3.Angle(vesselTransform.up, v.transform.position-vessel.transform.position) <45
				&& distanceToTarget < 300
			   && vessel.srfSpeed > 130)
			{
				extending = true;
				lastTargetPosition = v.transform.position;
			}

		}

	

		void FlyToPosition(FlightCtrlState s, Vector3 targetPosition)
		{
			if(!startedLanded)
			{
				targetPosition = FlightPosition(targetPosition, minAltitude);
			}


			velocityTransform.rotation = Quaternion.LookRotation(vessel.srf_velocity, -vesselTransform.forward);
			velocityTransform.rotation = Quaternion.AngleAxis(90, velocityTransform.right) * velocityTransform.rotation;
			Vector3 localAngVel = vessel.angularVelocity;

			if(steerMode == SteerModes.NormalFlight)
			{
				float angleToTarget = Vector3.Angle(targetPosition - vesselTransform.position, vesselTransform.up);
				Vector3 dampedDirection = Vector3.RotateTowards(vesselTransform.up, targetPosition - vesselTransform.position, (angleToTarget / 2) * Mathf.Deg2Rad, 0).normalized;
				targetPosition = vesselTransform.position + (500 * dampedDirection);
			}

			if(BDArmorySettings.DRAW_DEBUG_LINES)
			{
				flyingToPosition = targetPosition;
			}

			Vector3 targetDirection;
			Vector3 targetDirectionYaw;
			float yawError;
			float pitchError;
			float postYawFactor;
			float postPitchFactor;
			if(steerMode == SteerModes.NormalFlight)
			{
				targetDirection = velocityTransform.InverseTransformDirection(targetPosition-velocityTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 45 * Mathf.Deg2Rad, 0);

				targetDirectionYaw = vesselTransform.InverseTransformDirection(vessel.srf_velocity).normalized;
				targetDirectionYaw = Vector3.RotateTowards(Vector3.up, targetDirectionYaw, 45 * Mathf.Deg2Rad, 0);

				pitchError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirection, Vector3.right), Vector3.back);
				yawError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirectionYaw, Vector3.forward), Vector3.right);

				postYawFactor = 1;
				postPitchFactor = 1;
			}
			else//aiming
			{
				targetDirection = vesselTransform.InverseTransformDirection(targetPosition-vesselTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 45 * Mathf.Deg2Rad, 0);
				targetDirectionYaw = targetDirection;

				pitchError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirection, Vector3.right), Vector3.back);
				yawError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirectionYaw, Vector3.forward), Vector3.right);

				postYawFactor = 1.6f;
				postPitchFactor = 2.4f;
			}


			float finalMaxSteer = threatLevel * maxSteer;

			float steerPitch = (postPitchFactor * 0.015f * steerMult * pitchError) - (postPitchFactor * steerDamping * -localAngVel.x);
			float steerYaw = (postYawFactor * 0.022f * steerMult * yawError) - (postPitchFactor * steerDamping * -localAngVel.z);
	

			s.yaw = Mathf.Clamp(steerYaw, -finalMaxSteer, finalMaxSteer);
			s.pitch = Mathf.Clamp(steerPitch, Mathf.Min(-finalMaxSteer, -0.2f), finalMaxSteer);


			//roll
			Vector3 rollTarget = Vector3.ProjectOnPlane(upDirection, vesselTransform.up);
			if(steerMode == SteerModes.Aiming || Vector3.Angle(vesselTransform.up, targetPosition-vesselTransform.position) > 3)
			{
				rollTarget = Vector3.ProjectOnPlane((targetPosition+((steerMode == SteerModes.Aiming ? 10 : 45f)*upDirection))-vesselTransform.position, vesselTransform.up);
			}



			Vector3 currentRoll = -vesselTransform.forward;
			float rollError = Misc.SignedAngle(currentRoll, rollTarget, vesselTransform.right);
			debugString += "\nRoll offset: "+rollError;
			float steerRoll = (steerMult * 0.0015f * rollError);
			debugString += "\nSteerRoll: "+steerRoll;
			float rollDamping = (.10f * steerDamping * -localAngVel.y);
			steerRoll -= rollDamping;
			debugString += "\nRollDamping: "+rollDamping;



			float roll = Mathf.Clamp(steerRoll, -maxSteer, maxSteer);
			s.roll = roll;
			//
		}

		void FlyExtend(FlightCtrlState s, Vector3 tPosition)
		{
			if(wm)
			{
				float extendDistance = Mathf.Clamp(wm.guardRange-1800, 2500, 4000);
				if(targetVessel!=null && !targetVessel.Landed)
				{
					extendDistance = 800;
				}

				Vector3 srfVector = Vector3.ProjectOnPlane(vessel.transform.position - tPosition, upDirection);
				float srfDist = srfVector.magnitude;
				if(srfDist < extendDistance)
				{
					Vector3 targetDirection = srfVector.normalized*extendDistance;
					Vector3 target = vessel.transform.position + targetDirection;
					FlyToPosition(s, target);
				}
				else
				{
					extending = false;
				}
			}
			else
			{
				extending = false;
			}
		}

		void FlyCircular(FlightCtrlState s)
		{
			debugString += "\nFlying circular";
			bool enemiesNearby = false;
			if(wm)
			{
				BDArmorySettings.BDATeams team = wm.team ? BDArmorySettings.BDATeams.B : BDArmorySettings.BDATeams.A;
				if(BDATargetManager.TargetDatabase[team].Count > 0)
				{
					threatLevel = 1;
					enemiesNearby = true;
				}
			}

			if(!enemiesNearby)
			{
				threatLevel = Mathf.MoveTowards(threatLevel, 0.5f, 0.05f*Time.deltaTime);
			}
			Vector3 axis = Vector3.Project(-vesselTransform.right, upDirection).normalized;
			Vector3 target = DefaultAltPosition() + Quaternion.AngleAxis(15, axis) * Vector3.ProjectOnPlane(vesselTransform.up * 1000, upDirection);
			Vector3 dirToAxis = target - vesselTransform.position;
			dirToAxis = Vector3.RotateTowards(Vector3.ProjectOnPlane(dirToAxis, upDirection), dirToAxis, 15 * Mathf.Deg2Rad, 0).normalized;
			target = vesselTransform.position + (dirToAxis * 1000);
			FlyToPosition(s, target);
		}

		void Evasive(FlightCtrlState s)
		{
			debugString += "\nEvasive";
			threatLevel = 1f;
			Vector3 target = (vessel.srfSpeed < 200) ? FlightPosition(vessel.transform.position, minAltitude) : DefaultAltPosition();
			target +=
				 (Quaternion.AngleAxis(Mathf.Sin (Time.time * 0.7f) * 80, upDirection) * Vector3.ProjectOnPlane(vesselTransform.up * 750, upDirection))
				+ (Mathf.Sin (Time.time/3) * upDirection * minAltitude/3);

			if(wm.isFlaring && vessel.srfSpeed > 125)
			{
				s.mainThrottle = 0.5f;
			}

			FlyToPosition(s, target);
		}

		void TakeOff(FlightCtrlState s)
		{
			threatLevel = 1;
			debugString += "\nTaking off/Gaining altitude";

			if(vessel.Landed && vessel.srfSpeed < takeOffSpeed)
			{
				return;
			}

			steerMode = SteerModes.PreciseFlight;

			float radarAlt = MissileGuidance.GetRadarAltitude(vessel);

			Vector3 forwardPoint = vessel.transform.position + Vector3.ProjectOnPlane(vesselTransform.up * 100, upDirection);
			float terrainDiff = MissileGuidance.GetRaycastRadarAltitude(forwardPoint) - radarAlt;
			terrainDiff = Mathf.Max(terrainDiff, 0);

			float rise = Mathf.Clamp((float)vessel.srfSpeed * 0.3f, 5, 100);

			if(radarAlt > 70)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, false);
			}
			else
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, true);
			}

			FlyToPosition(s, forwardPoint + (upDirection * (rise+terrainDiff)));

			if(radarAlt > minAltitude)
			{
				startedLanded = false;
			}
		}

		Vector3 DefaultAltPosition()
		{
			return (vessel.transform.position + (-(float)vessel.altitude*upDirection) + (defaultAltitude *upDirection));
		}

		Vector3 GetSurfacePosition(Vector3 position)
		{
			return position - ((float)FlightGlobals.getAltitudeAtPos(position) * upDirection);
		}

		Vector3 GetTerrainSurfacePosition(Vector3 position)
		{
			return position - (MissileGuidance.GetRaycastRadarAltitude(position) * upDirection);
		}


		Vector3 FlightPosition(Vector3 targetPosition, float minAlt)
		{
			Vector3 forwardDirection = vesselTransform.up;
			Vector3 targetDirection = (targetPosition - vesselTransform.position).normalized;
			if(Vector3.Dot(targetDirection, forwardDirection) < 0)
			{
				targetPosition = vesselTransform.position + Vector3.ProjectOnPlane(Vector3.RotateTowards(forwardDirection, targetDirection, 90*Mathf.Deg2Rad, 0), upDirection).normalized*200;
			}
			float pointRadarAlt = MissileGuidance.GetRaycastRadarAltitude(targetPosition);
			if(pointRadarAlt < minAlt)
			{
				float adjustment = (minAlt-pointRadarAlt);
				debugString += "\nTarget position is below minAlt. Adjusting by "+adjustment;
				return targetPosition + (adjustment * upDirection);
			}
			else
			{
				return targetPosition;
			}
		}

		public bool GetLaunchAuthorization(Vessel targetV, MissileFire mf)
		{
			bool launchAuthorized = false;
			Vector3 target = targetV.transform.position;
			MissileLauncher missile = mf.currentMissile;
			if(missile != null)
			{
				if(!targetV.Landed)
				{
					target = MissileGuidance.GetAirToAirFireSolution(missile, targetV);
				}

				if(Vector3.Angle(missile.transform.forward, target - missile.transform.position) < missile.maxOffBoresight * 0.75f)
			   //|| (targetV.Landed && Vector3.Angle(vesselTransform.up, FlightPosition(target, (float)vessel.altitude)-vesselTransform.position) < 15))
				{
					launchAuthorized = true;
				}
			}

			return launchAuthorized;
		}

		void GetGuardTarget()
		{
			if(wm!=null && wm.vessel == vessel)
			{
				if(wm.guardMode && wm.currentTarget!=null)
				{
					targetVessel = wm.currentTarget.Vessel;
				}
				else
				{
					targetVessel = null;
				}
				wm.pilotAI = this;
				return;
			}
			else
			{
				foreach(var mf in vessel.FindPartModulesImplementing<MissileFire>())
				{
					if(mf.currentTarget!=null)
					{
						targetVessel = mf.currentTarget.Vessel;
					}
					else
					{
						targetVessel = null;
					}

					wm = mf;
					mf.pilotAI = this;

					return;
				}
			}
		}

		bool DetectCollision(Vector3 direction)
		{
			if(MissileGuidance.GetRadarAltitude(vessel) < 20) return false;

			direction = direction.normalized;
			int layerMask = 557057;
			Ray ray = new Ray(vesselTransform.position + (50*vesselTransform.up), direction);
			float distance = Mathf.Clamp((float)vessel.srfSpeed * 5, 250, 2500);
			RaycastHit hit;
			if(Physics.SphereCast(ray, 10, out hit, distance, layerMask))
			{
				Rigidbody otherRb = hit.collider.attachedRigidbody;
				if(otherRb)
				{
					if(Vector3.Dot(otherRb.velocity, vessel.srf_velocity) < 0)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return true;
				}
			}
			else
			{
				return false;
			}
		}

		void OnGUI()
		{
			if(pilotEnabled && BDArmorySettings.DRAW_DEBUG_LABELS && vessel.isActiveVessel)	
			{
				GUI.Label(new Rect(200,600,400,400), debugString);	
			}
		}

	}
}

